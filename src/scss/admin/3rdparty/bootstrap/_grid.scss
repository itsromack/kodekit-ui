// Tools

@import "../copied/bootstrap/functions";
@import "variables";

@import "../copied/bootstrap/mixins/breakpoints";
@import "../copied/bootstrap/mixins/grid-framework";
@import "../copied/bootstrap/mixins/grid";


// ========================
// README !important
//=========================
// Copied BS4 make-grid-colums mixin to change classnames
// When updating BS make sure to compare this mixin with the updated one and update accordingly

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: ($gutter / 2);
    padding-left: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .k-bs-col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .k-bs-col#{$infix},
    .k-bs-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .k-bs-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .k-bs-col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .k-bs-col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .k-bs-order#{$infix}-first { order: -1; }

      .k-bs-order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .k-bs-order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .k-bs-offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}


// Grid code
@if ($k-layout == true and $k-layout-bs-grid != false) or $k-layout-bs-grid == true {

  // Container widths
  //
  // Set the container width, and override it for fixed navbars in media queries.

  @if $enable-grid-classes {
    .k-bs-container-fluid,
    .k-bs-container {
      @include make-container();
    }

    .k-bs-maxwidth-container {
      @include make-container-max-widths();
    }
  }

  // Row
  //
  // Rows contain and clear the floats of your columns.

  @if $enable-grid-classes {
    .k-bs-row {
      @include make-row();
    }

    // Remove the negative margin from default .row, then the horizontal padding
    // from all immediate children columns (to prevent runaway style inheritance).
    .k-bs-no-gutters {
      margin-right: 0;
      margin-left: 0;

      > .k-bs-col,
      > [class*="k-bs-col-"] {
        padding-right: 0;
        padding-left: 0;
      }
    }
  }

  // Columns
  //
  // Common styles for small and large grid columns

  @if $enable-grid-classes {
    @include make-grid-columns();
  }

  // stylelint-disable declaration-no-important

  //
  // Utilities for common `display` values
  //

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      .k-bs-d#{$infix}-none {
        display: none !important;
      }
      .k-bs-d#{$infix}-inline {
        display: inline !important;
      }
      .k-bs-d#{$infix}-inline-block {
        display: inline-block !important;
      }
      .k-bs-d#{$infix}-block {
        display: block !important;
      }
      .k-bs-d#{$infix}-table {
        display: table !important;
      }
      .k-bs-d#{$infix}-table-row {
        display: table-row !important;
      }
      .k-bs-d#{$infix}-table-cell {
        display: table-cell !important;
      }
      .k-bs-d#{$infix}-flex {
        display: flex !important;
      }
      .k-bs-d#{$infix}-inline-flex {
        display: inline-flex !important;
      }
    }
  }

  // stylelint-disable declaration-no-important

  // Flex variation
  //
  // Custom styles for additional flex alignment options.

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      .k-bs-flex#{$infix}-row {
        flex-direction: row !important;
      }
      .k-bs-flex#{$infix}-column {
        flex-direction: column !important;
      }
      .k-bs-flex#{$infix}-row-reverse {
        flex-direction: row-reverse !important;
      }
      .k-bs-flex#{$infix}-column-reverse {
        flex-direction: column-reverse !important;
      }

      .k-bs-flex#{$infix}-wrap {
        flex-wrap: wrap !important;
      }
      .k-bs-flex#{$infix}-nowrap {
        flex-wrap: nowrap !important;
      }
      .k-bs-flex#{$infix}-wrap-reverse {
        flex-wrap: wrap-reverse !important;
      }
      .k-bs-flex#{$infix}-fill {
        flex: 1 1 auto !important;
      }
      .k-bs-flex#{$infix}-grow-0 {
        flex-grow: 0 !important;
      }
      .k-bs-flex#{$infix}-grow-1 {
        flex-grow: 1 !important;
      }
      .k-bs-flex#{$infix}-shrink-0 {
        flex-shrink: 0 !important;
      }
      .k-bs-flex#{$infix}-shrink-1 {
        flex-shrink: 1 !important;
      }

      .k-bs-justify-content#{$infix}-start {
        justify-content: flex-start !important;
      }
      .k-bs-justify-content#{$infix}-end {
        justify-content: flex-end !important;
      }
      .k-bs-justify-content#{$infix}-center {
        justify-content: center !important;
      }
      .k-bs-justify-content#{$infix}-between {
        justify-content: space-between !important;
      }
      .k-bs-justify-content#{$infix}-around {
        justify-content: space-around !important;
      }

      .k-bs-align-items#{$infix}-start {
        align-items: flex-start !important;
      }
      .k-bs-align-items#{$infix}-end {
        align-items: flex-end !important;
      }
      .k-bs-align-items#{$infix}-center {
        align-items: center !important;
      }
      .k-bs-align-items#{$infix}-baseline {
        align-items: baseline !important;
      }
      .k-bs-align-items#{$infix}-stretch {
        align-items: stretch !important;
      }

      .k-bs-align-content#{$infix}-start {
        align-content: flex-start !important;
      }
      .k-bs-align-content#{$infix}-end {
        align-content: flex-end !important;
      }
      .k-bs-align-content#{$infix}-center {
        align-content: center !important;
      }
      .k-bs-align-content#{$infix}-between {
        align-content: space-between !important;
      }
      .k-bs-align-content#{$infix}-around {
        align-content: space-around !important;
      }
      .k-bs-align-content#{$infix}-stretch {
        align-content: stretch !important;
      }

      .k-bs-align-self#{$infix}-auto {
        align-self: auto !important;
      }
      .k-bs-align-self#{$infix}-start {
        align-self: flex-start !important;
      }
      .k-bs-align-self#{$infix}-end {
        align-self: flex-end !important;
      }
      .k-bs-align-self#{$infix}-center {
        align-self: center !important;
      }
      .k-bs-align-self#{$infix}-baseline {
        align-self: baseline !important;
      }
      .k-bs-align-self#{$infix}-stretch {
        align-self: stretch !important;
      }
    }
  }
}