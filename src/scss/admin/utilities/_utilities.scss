@if ($k-utilities == true and $k-utilities-utilities != false) or $k-utilities-utilities == true {

  /**
   * Adding class three times so we win over most other classes without using
   * !important. Most selectors are max three long e.g.:
   * `.some.longer[css=selector]` will still lose from `.selector.selector.selector`
   * since we load this file last
   */

  /**
   * Dynamic content holder
   * Add `<script>` and other hidden content (like modals) inside this div so the elements won't be in the way for flexbox
   */

  .k-dynamic-content-holder.k-dynamic-content-holder.k-dynamic-content-holder {
    display: none;
  }

  /**
   * Hidden
   * Hide content in a non-accessible way. Content is hidden for everybody including screenreaders
   */

  .k-hidden.k-hidden.k-hidden,
  .k-is-hidden.k-is-hidden.k-is-hidden {
    display: none;
  }

  /**
   * Loader
   * CSS only loading animation.
   * Falls back to `Loading...` on non capable browsers
   * Add `k-hidden` class to the element when items are done loading
   */

  .k-loader {
    @include modernizr('.k-cssanimations.k-boxshadow') {
      display: inline-block;
      color: $k-loader-color;
      font-size: $k-loader-size-small;
      margin: 0 auto 2em;
      position: relative;
      text-indent: -9999em;
      vertical-align: middle;

      &,
      &:before,
      &:after {
        border-radius: 50%;
        width: 1em;
        height: 1em;
        animation-fill-mode: both;
        animation: k-loader $k-loader-duration infinite ease-in-out;
      }

      & {
        left: 1.25em;
      }

      &:before {
        left: -1.25em;
        animation-delay: -($k-loader-duration / 8);
      }

      &:after {
        left: 1.25em;
        animation-delay: ($k-loader-duration / 8);
      }

      &:before,
      &:after {
        content: '';
        position: absolute;
        top: 0;
      }

      /* Sizes */

      &.k-loader--small {
        font-size: $k-loader-size-small;
      }

      &.k-loader--medium {
        font-size: $k-loader-size-medium;
      }

      &.k-loader--large {
        font-size: $k-loader-size-large;
      }
    }

    @keyframes k-loader {
      0%,
      80%,
      100% {
        box-shadow: 0 1em 0 -0.5em;
      }
      40% {
        box-shadow: 0 1em 0 0;
      }
    }

    @include rtl {
      @include flip-item;
    }
  }

  /**
   * Loader container
   *
   * Cover it's entire parent (the parent with an `absolute` or `relative` position)
   * - Add `k-hidden` class to the element when items are done loading
   */

  .k-loader-container {
    @include coverall;
    z-index: 5;
    background: rgba($k-loader-container-background, $k-loader-container-opacity);
    display: flex;
    align-items: center;

    .k-loader {
      @include modernizr('.k-cssanimations.k-boxshadow') {
        left: 0;
      }
    }
  }

  /**
   * No margin
   * Remove all margins from an element
   */

  .k-no-margin.k-no-margin.k-no-margin {
    margin: 0;
  }

  /**
   * No transition
   *
   * Disable all transitions
   */

  .k-no-transition.k-no-transition.k-no-transition {
    transition: none;
  }

  /**
   * No wrap
   *
   * Nowrap element
    */

  .k-no-wrap.k-no-wrap.k-no-wrap {
    white-space: nowrap;
  }

  /**
   * Visually hidden
   *
   * Hide the content in an accessible way. Content is hidden for viewers but not for screenreaders
   */

  .k-visually-hidden.k-visually-hidden.k-visually-hidden {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
  }

  /**
   * Visually shown
   *
   * Show content that have the visually-hidden class
   * Use as @extend for items that are already extending `.k-visually-hidden`
   * Try not to use `.k-visually-hidden` and `.k-visually-shown` classes together if possible.
   */

  .k-visually-shown.k-visually-shown.k-visually-shown {
    position: static;
    overflow: visible;
    clip: auto;
    height: auto;
    width: auto;
    margin: 0;
  }

  /**
   * Ratio content
   */

  .k-ratio-block {
    position: relative;
    width: 100%;

    &--16-to-9 {
      @include ratio-block(16 to 9);
    }

    &--4-to-3 {
      @include ratio-block(4 to 3);
    }

    &--3-to-2 {
      @include ratio-block(3 to 2);
    }

    &--2-to-3 {
      @include ratio-block(2 to 3);
    }

    &--2-to-1 {
      @include ratio-block(2 to 1);
    }

    &--1-to-2 {
      @include ratio-block(1 to 2);
    }

    &--1-to-1 {
      @include ratio-block(1 to 1);
    }

    &.k-is-loaded {
      .k-loader.k-loader {
        opacity: 0;
      }
    }

    .k-loader.k-loader {
      position: absolute;
      top: 50%;
      left: 50%;
      z-index: 1;
      transform: translate(-50%, -50%);
    }

    .k-ratio-block__body {
      @include coverall;
      z-index: 2;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }
  }

  /**
   * Colors
   */

  .k-color-error {
    color: $k-color-error;
  }

  /**
   * Content block
   *
   * Element with a bottom margin except when item itself is a last-child
   */

  .k-content-block {
    @include content-block;
  }

  .k-content-block--small {
    @include content-block(1em);
  }

  .k-content-block-top {
    @include content-block-top;
  }

  .k-content-block-top--small {
    @include content-block-top(1em);
  }

  /**
   * Relative positioned element
   *
   * Could be useful to add to parnet sof absolutely positioned items
   */

  .k-position-relative {
    position: relative;
  }

  /**
   * Flexing boxes
   *
   * DO or don't flexing children. USeful inside flexing containers on elemtns that have no pre-defined styling for flexbox
   */

  .k-dont-flex.k-dont-flex.k-dont-flex {
    flex: 0 0 auto;
  }

  .k-do-flex.k-do-flex.k-do-flex {
    flex: 1 1 auto;
  }

  /**
   * Hide elements for touch enabled devices
   */

  .k-touchevents-hidden {
    @include modernizr('.k-touchevents') {
      display: none !important;
    }
  }

  /**
   * Text overflow
   */

  .k-ellipsis {
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    a, span, input, svg, div, small {
      display: inline-block;
      vertical-align: middle;
      max-width: 100%;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

  .k-ellipsis__item {
    // Item to be ellipsed
  }

  /**
   * "Cover all" link
   *
   * Use a pseudo element inside the `<a>` to vover the entire parent.
   * - This way we don't have to make a the parent element a link.
   * - Downside: You can't select the text anymore, but this could also be used to your advantage
   */

  .k-link-coverall {
    @include pseudo(after, false) {
      @include coverall;
    }
  }

  /**
   * "On-top" links
   *
   * Use inside the same parent as the above "coverall" link to place this link on top of the pseudo element
   */

  .k-coverall-ontop,
  .k-link-ontop {
    position: relative;
    z-index: 1;
  }

  /**
   * This or that
   *
   * Line items up next to each other
   */

  .k-this-or-that {
    display: inline-block;
    margin-right: $k-spacing-tiny;
    vertical-align: middle;

    @include rtl {
      margin-right: 0;
      margin-left: $k-spacing-tiny;
    }
  }
}
